package model

import (
    "github.com/IntelliLead/ReviewHandlers/src/pkg/model/enum"
    _type "github.com/IntelliLead/ReviewHandlers/src/pkg/model/type"
    "github.com/go-playground/validator/v10"
    "time"
)

type Review struct {
    UserId               string          `dynamodbav:"userId"`                                           // partition key
    ReviewId             *_type.ReviewId `dynamodbav:"uniqueId" validate:"omitempty,reviewIdValidation"` // sort key, to be generated by DAO. Not optional during DDB interaction
    VendorReviewId       string          `dynamodbav:"vendorReviewId"`
    VendorEventId        string          `dynamodbav:"vendorEventId"`
    NumberRating         int             `dynamodbav:"numberRating" validate:"min=1,max=5"`
    Review               string          `dynamodbav:"review"`
    CreatedAt            time.Time       `dynamodbav:"createdAt,unixtime"`
    ReviewLastUpdated    time.Time       `dynamodbav:"reviewLastUpdated,unixtime"`
    ReviewerProfilePhoto string          `dynamodbav:"reviewerProfilePhoto" validate:"url"` // TODO: URL type validation
    ReviewerName         string          `dynamodbav:"reviewerName"`
    reply                *string         `dynamodbav:"reply,omitempty" validate:"required_with=LastReplied"`          // optional
    LastReplied          *time.Time      `dynamodbav:"lastReplied,omitempty,unixtime" validate:"required_with=Reply"` // optional
    LastUpdated          time.Time       `dynamodbav:"lastUpdated,unixtime"`
    Vendor               enum.Vendor     `dynamodbav:"vendor"`
}

func NewReview(event ZapierNewReviewEvent) (*Review, error) {
    var replyCopy *string
    if event.Reply != nil {
        replyCopy = new(string)
        *replyCopy = *event.Reply
    }

    var lastRepliedCopy *time.Time
    if event.LastReplied != nil {
        lastRepliedCopy = new(time.Time)
        *lastRepliedCopy = *event.LastReplied
    }

    review := Review{
        UserId:               event.UserId,
        VendorReviewId:       event.VendorReviewId,
        VendorEventId:        event.VendorEventId,
        NumberRating:         int(event.NumberRating),
        Review:               event.Review,
        CreatedAt:            event.CreatedAt,
        ReviewLastUpdated:    event.ReviewLastUpdated,
        ReviewerProfilePhoto: event.ReviewerProfilePhoto,
        ReviewerName:         event.ReviewerName,
        reply:                replyCopy,
        LastReplied:          lastRepliedCopy,
        LastUpdated:          time.Now(),
        Vendor:               enum.VendorGoogle,
    }

    validate := validator.New()
    // even with omitEmpty and reviewId is indeed empty, validation registration is still needed
    err := validate.RegisterValidation("reviewIdValidation", ReviewIdValidation)
    if err != nil {
        return nil, err
    }
    // err := validator.New().Struct(review)
    err = validate.Struct(review)
    if err != nil {
        return nil, err
    }

    return &review, nil
}

func ReviewIdValidation(fl validator.FieldLevel) bool {
    reviewId := fl.Field().Interface().(*_type.ReviewId)

    // Check if ReviewId is nil
    if reviewId == nil {
        return true
    }

    // Check if ReviewId is a numbers-only string
    if !isNumbersOnly(string(*reviewId)) {
        return false
    }

    // Check if ReviewId length is divisible by 3
    if len(*reviewId)%3 != 0 {
        return false
    }

    return true
}

func isNumbersOnly(s string) bool {
    for _, c := range s {
        if c < '0' || c > '9' {
            return false
        }
    }
    return true
}
